{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["declare global {\n  interface Window {\n    gsap: any;\n  }\n}\n\ntype SpinState = {\n  stopSegment: number;\n  callback?: () => void;\n};\n\ntype WheelFortuneOptions = {\n  containerEl?: string | HTMLElement;\n  segmentsEl?: string | HTMLElement;\n  buttonEl?: string | HTMLElement;\n  rotationCount?: number;\n  segmentCount?: number;\n  spinStates?: SpinState[];\n  wheelLibration?: boolean;\n};\n\nclass WheelFortune {\n  private readonly containerEl: HTMLElement;\n  private readonly segmentsEl: HTMLElement;\n  private buttonEl: HTMLElement;\n  private readonly rotationCount: number;\n  private readonly segmentCount: number;\n  private readonly spinStates: SpinState[];\n  private currentSpinIndex: number;\n  private tlSpin: any;\n  private tlBlackout: any;\n  private readonly wheelLibration: boolean;\n  private tlLibration: any;\n\n  static gsap: any;\n  static customEase: any;\n\n  constructor({\n    containerEl = '.wheel',\n    segmentsEl = '.wheel__segments',\n    buttonEl = '.wheel__button',\n    rotationCount = 3,\n    segmentCount = 8,\n    spinStates = [],\n    wheelLibration = false,\n  }: WheelFortuneOptions = {}) {\n    const gsapInstance = WheelFortune.gsap || window.gsap;\n\n    this.rotationCount = rotationCount;\n    this.segmentCount = segmentCount;\n    this.spinStates = spinStates;\n    this.currentSpinIndex = 0;\n    this.wheelLibration = wheelLibration;\n\n    const getElement = (el: string | HTMLElement): HTMLElement =>\n      el instanceof HTMLElement ? el : document.querySelector(el)!;\n\n    this.containerEl = getElement(containerEl);\n    this.segmentsEl = getElement(segmentsEl);\n    this.buttonEl = getElement(buttonEl);\n\n    WheelFortune.gsap = gsapInstance;\n  }\n\n  static registerGSAP(gsap: any, customEase: any) {\n    WheelFortune.gsap = gsap;\n    WheelFortune.customEase = customEase;\n  }\n\n  private calculate(stopSegment: number) {\n    const fullCircle = 360;\n    const segmentAngle = fullCircle / this.segmentCount;\n    const wheelTurn = fullCircle * this.rotationCount;\n    const rotation = wheelTurn - segmentAngle * (stopSegment - 1);\n\n    return { fullCircle, wheelTurn, rotation };\n  }\n\n  public spin() {\n    if (this.tlLibration) {\n      this.tlLibration.kill();\n      this.tlLibration = null;\n    }\n\n    const { stopSegment, callback } = this.spinStates[this.currentSpinIndex];\n    const { fullCircle, wheelTurn, rotation } = this.calculate(stopSegment);\n\n    this.tlSpin = WheelFortune.gsap.timeline({ paused: true });\n    this.tlBlackout = WheelFortune.gsap.timeline({ paused: true });\n\n    const spinBegin = () => {\n      WheelFortune.gsap.to(this.containerEl, {\n        '--blurring': '40px',\n        duration: 1,\n        delay: 0.25,\n        ease: 'circ.in',\n      });\n\n      this.containerEl.classList.add('is-spinning');\n    };\n\n    const spinProcess = () => {\n      WheelFortune.gsap.to(this.containerEl, {\n        '--blurring': '0px',\n        duration: 1,\n        delay: 0.5,\n        ease: 'power2.out',\n      });\n    };\n\n    const spinEnd = () => {\n      this.currentSpinIndex += 1;\n      this.containerEl.classList.remove('is-spinning');\n\n      if (this.currentSpinIndex >= this.spinStates.length) {\n        this.containerEl.classList.add('end-last-spin');\n      }\n    };\n\n    this.tlSpin\n      .to(this.segmentsEl, {\n        clearProps: 'rotation',\n        ease: 'power2.in',\n        rotation: `+=${wheelTurn}`,\n        duration: 1.5,\n        onStart: spinBegin,\n      })\n      .to(this.segmentsEl, {\n        clearProps: 'rotation',\n        ease: 'none',\n        rotation: `+=${fullCircle}`,\n        duration: 0.15,\n        repeat: this.rotationCount,\n      })\n      .to(this.segmentsEl, {\n        ease: WheelFortune.customEase.create(\n          'custom',\n          'M0,0 C0.11,0.494 0.136,0.67 0.318,0.852 0.626,1.16 0.853,0.989 1,1',\n        ),\n        rotation: `+=${rotation}`,\n        duration: 3,\n        onStart: spinProcess,\n        onComplete: () => {\n          if (callback) callback();\n\n          this.tlBlackout.restart();\n        },\n      });\n\n    this.tlBlackout\n      .to(this.containerEl, {\n        '--blackout-opacity': '0.6',\n        duration: 0.5,\n        ease: 'power2.in',\n      })\n      .to(this.containerEl, {\n        '--blackout-opacity': '0',\n        duration: 0.5,\n        ease: 'power2.out',\n        onComplete: spinEnd,\n      }, '<2');\n\n    this.tlSpin.restart();\n  }\n\n  private libration() {\n    this.tlLibration = WheelFortune.gsap.timeline();\n\n    this.tlLibration\n      .set(this.segmentsEl, {\n        rotate: 0,\n      })\n      .to(this.segmentsEl, {\n        rotate: -6,\n        duration: 0.75,\n        ease: 'power1.inOut',\n      })\n      .fromTo(this.segmentsEl, {\n        rotate: -6,\n      }, {\n        rotate: 6,\n        duration: 1.5,\n        repeat: -1,\n        yoyo: true,\n        ease: 'power1.inOut',\n      });\n  }\n\n  private spinAction() {\n    this.buttonEl.onclick = () => this.spin();\n  }\n\n  public init() {\n    this.spinAction();\n    this.containerEl.style.setProperty('--blackout-opacity', '0');\n    this.containerEl.style.setProperty('--blackout-angle', this.segmentCount.toString());\n\n    if (this.wheelLibration) {\n      this.libration();\n    }\n  }\n\n  public destroy() {\n    WheelFortune.gsap.killTweensOf([this.containerEl, this.segmentsEl]);\n\n    this.buttonEl.onclick = null;\n  }\n}\n\nexport default WheelFortune;\n"],"names":[],"version":3,"file":"index.js.map"}