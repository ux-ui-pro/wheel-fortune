{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["type SpinState = {\n  stopSegment: number;\n  callback?: () => void;\n};\n\ninterface WheelFortuneConfig {\n  containerEl?: HTMLElement | string;\n  segmentsEl?: HTMLElement | string;\n  buttonEl?: HTMLElement | string;\n  rotationCount?: number;\n  segmentCount?: number;\n  spinStates?: SpinState[];\n  wheelLibration?: boolean;\n}\n\ninterface GSAPAnimationVars {\n  clearProps?: string;\n  ease?: string | object;\n  rotation?: string | number;\n  duration?: number;\n  delay?: number;\n  repeat?: number;\n  yoyo?: boolean;\n  onStart?: () => void;\n  onComplete?: () => void;\n  '--blurring'?: string;\n  '--blackout-opacity'?: string;\n  rotate?: number;\n}\n\ninterface GSAPTimeline {\n  paused?: boolean;\n  to: (element: HTMLElement, vars: GSAPAnimationVars) => GSAPTimeline;\n  fromTo: (element: HTMLElement, fromVars: GSAPAnimationVars, toVars: GSAPAnimationVars) => GSAPTimeline;\n  set: (element: HTMLElement, vars: GSAPAnimationVars) => GSAPTimeline;\n  restart: () => void;\n  kill: () => void;\n}\n\ninterface GSAP {\n  timeline: (vars?: Record<string, unknown>) => GSAPTimeline;\n  to: (element: HTMLElement, vars: GSAPAnimationVars) => void;\n  killTweensOf: (elements: HTMLElement | HTMLElement[]) => void;\n}\n\ninterface CustomEase {\n  create: (name: string, ease: string) => object;\n}\n\nclass WheelFortune {\n  private readonly containerEl: HTMLElement;\n\n  private readonly segmentsEl: HTMLElement;\n\n  private buttonEl: HTMLElement;\n\n  private readonly rotationCount: number;\n\n  private readonly segmentCount: number;\n\n  private readonly spinStates: SpinState[];\n\n  private currentSpinIndex: number;\n\n  private tlSpin: GSAPTimeline | null;\n\n  private tlBlackout: GSAPTimeline | null;\n\n  private readonly wheelLibration: boolean;\n\n  private tlLibration: GSAPTimeline | null;\n\n  static gsap: GSAP | null = null;\n\n  static customEase: CustomEase | null = null;\n\n  constructor({\n    containerEl = '.wheel',\n    segmentsEl = '.wheel__segments',\n    buttonEl = '.wheel__button',\n    rotationCount = 3,\n    segmentCount = 8,\n    spinStates = [],\n    wheelLibration = false,\n  }: WheelFortuneConfig = {}) {\n    if (!WheelFortune.gsap || !WheelFortune.customEase) {\n      throw new Error('GSAP is not registered. Please call WheelFortune.registerGSAP() first.');\n    }\n\n    this.rotationCount = rotationCount;\n    this.segmentCount = segmentCount;\n    this.spinStates = spinStates;\n    this.currentSpinIndex = 0;\n    this.wheelLibration = wheelLibration;\n    this.tlSpin = null;\n    this.tlBlackout = null;\n    this.tlLibration = null;\n\n    const getElement = (el: HTMLElement | string): HTMLElement => {\n      if (el instanceof HTMLElement) return el;\n\n      const element = document.querySelector(el);\n      if (!element) {\n        throw new Error(`Element ${el} not found`);\n      }\n\n      return element as HTMLElement;\n    };\n\n    this.containerEl = getElement(containerEl);\n    this.segmentsEl = getElement(segmentsEl);\n    this.buttonEl = getElement(buttonEl);\n  }\n\n  static registerGSAP(gsapInstance: GSAP, customEase: CustomEase) {\n    WheelFortune.gsap = gsapInstance;\n    WheelFortune.customEase = customEase;\n  }\n\n  private calculate(stopSegment: number) {\n    const fullCircle = 360;\n    const segmentAngle = fullCircle / this.segmentCount;\n    const wheelTurn = fullCircle * this.rotationCount;\n    const rotation = wheelTurn - (segmentAngle * (stopSegment - 1));\n\n    return { fullCircle, wheelTurn, rotation };\n  }\n\n  private createSpinTimeline(wheelTurn: number, fullCircle: number, rotation: number, callback?: () => void): GSAPTimeline {\n    const timeline = WheelFortune.gsap!.timeline({ paused: true });\n\n    timeline\n      .to(this.segmentsEl, {\n        clearProps: 'rotation',\n        ease: 'power2.in',\n        rotation: `+=${wheelTurn}`,\n        duration: 1.5,\n        onStart: () => {\n            WheelFortune.gsap!.to(this.containerEl, {\n              '--blurring': '40px',\n              duration: 1,\n              delay: 0.25,\n              ease: 'circ.in',\n            });\n            this.containerEl.classList.add('is-spinning');\n        },\n      })\n      .to(this.segmentsEl, {\n        clearProps: 'rotation',\n        ease: 'none',\n        rotation: `+=${fullCircle}`,\n        duration: 0.15,\n        repeat: this.rotationCount,\n      })\n      .to(this.segmentsEl, {\n        ease: WheelFortune.customEase!.create('custom', 'M0,0 C0.11,0.494 0.136,0.67 0.318,0.852 0.626,1.16 0.853,0.989 1,1'),\n        rotation: `+=${rotation}`,\n        duration: 3,\n        onStart: () => {\n            WheelFortune.gsap!.to(this.containerEl, {\n              '--blurring': '0px',\n              duration: 1,\n              delay: 0.5,\n              ease: 'power2.out',\n            });\n        },\n        onComplete: () => {\n          if (callback) callback();\n            this.tlBlackout!.restart();\n        },\n      });\n\n    return timeline;\n  }\n\n  private createBlackoutTimeline(): GSAPTimeline {\n    const timeline = WheelFortune.gsap!.timeline({ paused: true });\n\n    timeline\n      .to(this.containerEl, {\n        '--blackout-opacity': '0.6',\n        duration: 0.75,\n        ease: 'power3.out',\n      })\n      .to(this.containerEl, {\n        '--blackout-opacity': '0',\n        delay: 1.5,\n        duration: 0.75,\n        ease: 'power3.out',\n        onComplete: () => {\n          this.currentSpinIndex += 1;\n          this.containerEl.classList.remove('is-spinning');\n\n          if (this.currentSpinIndex >= this.spinStates.length) {\n            this.containerEl.classList.add('end-last-spin');\n          }\n        },\n      });\n\n    return timeline;\n  }\n\n  public spin() {\n    if (this.tlLibration) {\n      this.tlLibration.kill();\n      this.tlLibration = null;\n    }\n\n    if (!this.spinStates.length) {\n      return;\n    }\n\n    if (this.currentSpinIndex >= this.spinStates.length) {\n      return;\n    }\n\n    const { stopSegment, callback } = this.spinStates[this.currentSpinIndex];\n    const { fullCircle, wheelTurn, rotation } = this.calculate(stopSegment);\n\n    this.tlSpin = this.createSpinTimeline(wheelTurn, fullCircle, rotation, callback);\n    this.tlBlackout = this.createBlackoutTimeline();\n\n    this.tlSpin.restart();\n  }\n\n  private libration() {\n    this.tlLibration = WheelFortune.gsap!.timeline();\n\n    this.tlLibration\n      .set(this.segmentsEl, {\n        rotate: 0,\n      })\n      .to(this.segmentsEl, {\n        rotate: -6,\n        duration: 0.75,\n        ease: 'power1.inOut',\n      })\n      .fromTo(this.segmentsEl, {\n        rotate: -6,\n      }, {\n        rotate: 6,\n        duration: 1.5,\n        repeat: -1,\n        yoyo: true,\n        ease: 'power1.inOut',\n      });\n  }\n\n  private spinAction() {\n    this.buttonEl.onclick = () => this.spin();\n  }\n\n  public init() {\n    this.spinAction();\n\n    this.containerEl.style.setProperty('--blackout-opacity', '0');\n    this.containerEl.style.setProperty('--blackout-angle', `${this.segmentCount}`);\n\n    if (this.wheelLibration) {\n      this.libration();\n    }\n  }\n\n  public destroy() {\n    WheelFortune.gsap!.killTweensOf([this.containerEl, this.segmentsEl]);\n    this.buttonEl.onclick = null;\n  }\n}\n\nexport default WheelFortune;\n"],"names":[],"version":3,"file":"index.module.js.map"}